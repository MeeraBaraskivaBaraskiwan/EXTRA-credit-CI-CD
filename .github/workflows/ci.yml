# File: .github/workflows/ci.yml
name: Build and Test

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop, 'feature/**' ]
  workflow_dispatch:
    inputs:
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      target_revision:
        description: 'Target revision number (for rollback)'
        required: false
        default: '2'
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: payroll-service
  ECS_CLUSTER: payroll-cluster1
  ECS_SERVICE: payroll-service-service

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback != 'true'

    defaults:
      run:
        working-directory: employees-main

    steps:
      # 1) Checkout your code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # 3) Cache Maven local repo
      - name: Cache Maven local repo
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('employees-main/**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      # 4) Make mvnw executable
      - name: Make mvnw executable
        run: chmod +x ./mvnw

      # 5) Run Checkstyle analysis
      - name: Run Checkstyle analysis
        run: ./mvnw checkstyle:check
        continue-on-error: true

      # 6) Build with Maven Wrapper (skip tests)
      - name: Build with Maven Wrapper
        run: ./mvnw clean package -DskipTests -B

      # 7) Run unit tests
      - name: Run tests
        run: ./mvnw test -B

      # 8) Upload JAR artifact
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: employees-main/target/*.jar

  build-and-push-docker:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event.inputs.rollback != 'true'

    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
      image-uri: ${{ steps.build-image.outputs.image-uri }}

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Download the JAR from the previous job
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: employees-main/target/

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, tag, and push Docker image
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build \-f employees-main/Dockerfile \-t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \employees-main

          echo "Tagging image as latest..."
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "Pushing image ($IMAGE_TAG) to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "Pushing 'latest' tag to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "✅ Docker image pushed successfully!"
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main' && github.event.inputs.rollback != 'true'

    steps:
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # Force a new ECS deployment
      - name: Update ECS service with new image
        run: |
          echo "🚀 Deploying new image to ECS..."
          echo "Image URI: ${{ needs.build-and-push-docker.outputs.image-uri }}"

          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --query 'service.serviceName' \
            --output text

          echo "✅ ECS deployment initiated successfully!"

      # Wait for ECS service to stabilize
      - name: Wait for ECS service to stabilize
        run: |
          echo "⏳ Waiting for ECS service to become stable..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

          echo "✅ ECS service is now stable!"

    rollback:
    name: Rollback to Previous Version
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback == 'true'

    steps:
      # … your AWS credentials steps above …

      # Get current task definition (you already have that) …
      - name: Get current task definition
        id: current-task-def
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].taskDefinition' \
            --output text)
          echo "current-task-def=$CURRENT_TASK_DEF" >> $GITHUB_OUTPUT
          echo "📍 Current task definition: $CURRENT_TASK_DEF"

      # List available task definition revisions (you already have that) …
      - name: List available task definition revisions
        run: |
          echo "📋 Available task definition revisions (latest 5):"
          aws ecs list-task-definitions \
            --family-prefix payroll-service \
            --status ACTIVE \
            --sort DESC \
            --max-items 5 \
            --query 'taskDefinitionArns[*]' \
            --output table

      # ————————————————
      # 👉 Replace just this line below:
      - name: Rollback to specified revision
        run: |
          TARGET_REVISION="${{ github.event.inputs.target_revision }}"

          # ← Only change “payroll-task” to “payroll-service” here
          TARGET_TASK_DEF="arn:aws:ecs:us-east-1:133039549257:task-definition/payroll-service:$TARGET_REVISION"

          echo "⚠️  ROLLBACK INITIATED"
          echo "🎯 Rolling back to revision: $TARGET_REVISION"
          echo "📝 Target task definition: $TARGET_TASK_DEF"

          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $TARGET_TASK_DEF \
            --query 'service.serviceName' \
            --output text

          echo "✅ Rollback initiated successfully!"

      # Wait for rollback to stabilize
      - name: Monitor rollback deployment
        run: |
          echo "📊 Monitoring rollback deployment..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

          echo "✅ Rollback completed successfully!"


  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [ build-and-test, build-and-push-docker, deploy, rollback ]
    if: always()

    steps:
      - name: Notify success
        if: >
          (needs.build-and-test.result == 'success' || needs.build-and-test.result == 'skipped') &&
          (needs.build-and-push-docker.result == 'success' || needs.build-and-push-docker.result == 'skipped') &&
          (needs.deploy.result == 'success' || needs.deploy.result == 'skipped') &&
          (needs.rollback.result == 'success' || needs.rollback.result == 'skipped')
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "🚀 Deployment details:"
          echo "  Branch: ${{ github.ref_name }}"
          echo "  Commit: ${{ github.sha }}"
          echo "  Author: ${{ github.actor }}"

          if [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "✅ Build, tests, and static analysis passed"
          fi

          if [ "${{ needs.build-and-push-docker.result }}" = "success" ]; then
            echo "✅ Docker image pushed to ECR"
            echo "  Image tag: ${{ needs.build-and-push-docker.outputs.image-tag }}"
          fi

          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ Deployed to ECS successfully"
            echo "  Service: $ECS_SERVICE"
            echo "  Cluster: $ECS_CLUSTER"
          fi

          if [ "${{ needs.rollback.result }}" = "success" ]; then
            echo "✅ Rollback completed successfully"
            echo "  Reverted to task definition revision: ${{ github.event.inputs.target_revision }}"
          fi

          echo ""
          echo "🌐 Your application should now be accessible at your ECS public IP on port 8080."

      - name: Notify failure
        if: >
          needs.build-and-test.result == 'failure' ||
          needs.build-and-push-docker.result == 'failure' ||
          needs.deploy.result == 'failure' ||
          needs.rollback.result == 'failure'
        run: |
          echo "❌ Pipeline failed!"
          echo "📊 Failure details:"
          echo "  Branch: ${{ github.ref_name }}"
          echo "  Commit: ${{ github.sha }}"
          echo "  Author: ${{ github.actor }}"

          if [ "${{ needs.build-and-test.result }}" = "failure" ]; then
            echo "❌ Build, tests, or static analysis failed"
          fi

          if [ "${{ needs.build-and-push-docker.result }}" = "failure" ]; then
            echo "❌ Docker build/push to ECR failed"
          fi

          if [ "${{ needs.deploy.result }}" = "failure" ]; then
            echo "❌ ECS deployment failed"
          fi

          if [ "${{ needs.rollback.result }}" = "failure" ]; then
            echo "❌ Rollback failed"
          fi

          echo ""
          echo "🔍 Please check the workflow logs above for detailed error information."